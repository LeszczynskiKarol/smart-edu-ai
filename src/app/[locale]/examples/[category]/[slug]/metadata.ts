// src/app/[locale]/examples/[category]/[slug]/metadata.ts
import type { Metadata } from 'next';

async function getExampleBySlug(category: string, slug: string) {
  try {
    // ZMIENIONE - u≈ºywaj thesis-examples
    const apiUrl = `${process.env.NEXT_PUBLIC_API_URL}/api/thesis-examples/${category}/${slug}`;

    console.log('üîç Fetching metadata from:', apiUrl);

    const res = await fetch(apiUrl, {
      cache: 'no-store',
      headers: {
        'Content-Type': 'application/json',
      },
    });

    if (!res.ok) {
      console.error('‚ùå Metadata fetch failed:', res.status);
      return null;
    }

    const data = await res.json();
    console.log('‚úÖ Metadata fetched:', data.title);
    return data;
  } catch (error) {
    console.error('‚ùå Error fetching example for metadata:', error);
    return null;
  }
}

export async function generateMetadata({
  params: { locale, category, slug },
}: {
  params: {
    locale: string;
    category: string;
    slug: string;
  };
}): Promise<Metadata> {
  console.log('üéØ generateMetadata called for:', { locale, category, slug });

  const baseUrl =
    process.env.NEXT_PUBLIC_BASE_URL || 'https://www.smart-edu.ai';

  const example = await getExampleBySlug(category, slug);

  if (!example) {
    console.log('‚ùå No example found, using fallback metadata');
    return {
      title:
        locale === 'pl'
          ? 'Przyk≈Çad nie znaleziony | Smart-Edu.ai'
          : 'Example not found | Smart-Edu.ai',
      description:
        locale === 'pl'
          ? 'Nie znaleziono ≈ºƒÖdanego przyk≈Çadu pracy'
          : 'The requested example was not found',
    };
  }

  const title = locale === 'pl' ? example.title : example.titleEn;
  const metaTitle = locale === 'pl' ? example.metaTitlePl : example.metaTitleEn;
  const metaDescription =
    locale === 'pl' ? example.metaDescriptionPl : example.metaDescriptionEn;

  const finalTitle = metaTitle || title;
  const finalDescription =
    metaDescription ||
    (locale === 'pl'
      ? `Przyk≈Çad pracy: ${title}. Sprawd≈∫ wzorowƒÖ pracƒô wygenerowanƒÖ przez AI.`
      : `Example work: ${title}. Check out a model paper generated by AI.`);

  console.log('‚úÖ Final metadata title:', finalTitle);

  const pageUrl = `${baseUrl}/${locale}/examples/${category}/${slug}`;

  return {
    metadataBase: new URL(baseUrl),
    title: finalTitle,
    description: finalDescription,
    keywords:
      locale === 'pl'
        ? `${title}, przyk≈Çad pracy, wz√≥r pracy, generator prac AI`
        : `${title}, example work, sample paper, AI paper generator`,
    authors: [{ name: 'Smart-Edu.AI' }],
    creator: 'Smart-Edu.AI',
    publisher: 'Smart-Edu.AI',
    robots: {
      index: true,
      follow: true,
    },
    openGraph: {
      title: finalTitle,
      description: finalDescription,
      url: pageUrl,
      siteName: 'Smart-Edu.AI',
      locale: locale,
      type: 'article',
      publishedTime: example.createdAt,
      modifiedTime: example.updatedAt,
      authors: ['Smart-Edu.AI'],
    },
    twitter: {
      card: 'summary_large_image',
      title: finalTitle,
      description: finalDescription,
    },
    alternates: {
      canonical: pageUrl,
      languages: {
        en: `${baseUrl}/en/examples/${category}/${example.slugEn}`,
        pl: `${baseUrl}/pl/examples/${category}/${example.slug}`,
      },
    },
  };
}
